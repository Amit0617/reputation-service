// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Group extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("leafCount", Value.fromBigInt(BigInt.zero()));
    this.set("memberCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Group entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Group entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Group", id.toString(), this);
    }
  }

  static load(id: string): Group | null {
    return changetype<Group | null>(store.get("Group", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): string {
    let value = this.get("provider");
    return value!.toString();
  }

  set provider(value: string) {
    this.set("provider", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get leafCount(): BigInt {
    let value = this.get("leafCount");
    return value!.toBigInt();
  }

  set leafCount(value: BigInt) {
    this.set("leafCount", Value.fromBigInt(value));
  }

  get memberCount(): BigInt {
    let value = this.get("memberCount");
    return value!.toBigInt();
  }

  set memberCount(value: BigInt) {
    this.set("memberCount", Value.fromBigInt(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("leafIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Member entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get identityCommitment(): string | null {
    let value = this.get("identityCommitment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set identityCommitment(value: string | null) {
    if (!value) {
      this.unset("identityCommitment");
    } else {
      this.set("identityCommitment", Value.fromString(<string>value));
    }
  }

  get rootHash(): string | null {
    let value = this.get("rootHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rootHash(value: string | null) {
    if (!value) {
      this.unset("rootHash");
    } else {
      this.set("rootHash", Value.fromString(<string>value));
    }
  }

  get leafIndex(): BigInt {
    let value = this.get("leafIndex");
    return value!.toBigInt();
  }

  set leafIndex(value: BigInt) {
    this.set("leafIndex", Value.fromBigInt(value));
  }

  get group(): string | null {
    let value = this.get("group");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set group(value: string | null) {
    if (!value) {
      this.unset("group");
    } else {
      this.set("group", Value.fromString(<string>value));
    }
  }
}
